package main

import (
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"strings"

	"github.com/PuerkitoBio/goquery"
	"github.com/bregydoc/gtranslate"
	tgbotapi "gopkg.in/telegram-bot-api.v4"
)

type WeatherData struct {
	Condition     string
	Temperature   string
	WindSpeed     string
	Precipitation string
	Pressure      string
	Visibility    string
	Cloudiness    string
}

func main() {
	bot, err := tgbotapi.NewBotAPI("6699865318:AAFZeuStbL37m07Qmod0iguI9H1jZlIYYU8")
	if err != nil {
		log.Fatal(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã /today <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ /week <–≥–æ—Ä–æ–¥> –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é.")
				bot.Send(msg)
			case "help":
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã /today <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ /week <–≥–æ—Ä–æ–¥> –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é.")
				bot.Send(msg)
			default:
				handleWeatherCommands(bot, update.Message)
			}
		}
	}
}

func handleWeatherCommands(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	if strings.HasPrefix(message.Text, "/today") {
		location := strings.TrimSpace(strings.TrimPrefix(message.Text, "/today"))
		weatherText, err := getTodayWeather(location)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: %v", err)
			msg := tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")
			bot.Send(msg)
			return
		}
		msg := tgbotapi.NewMessage(message.Chat.ID, weatherText)
		msg.ParseMode = tgbotapi.ModeHTML // Use HTML mode for rich formatting
		bot.Send(msg)
	} else if strings.HasPrefix(message.Text, "/week") {
		location := strings.TrimSpace(strings.TrimPrefix(message.Text, "/week"))
		forecastText, err := getWeekWeather(location)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: %v", err)
			msg := tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
			bot.Send(msg)
			return
		}
		msg := tgbotapi.NewMessage(message.Chat.ID, forecastText)
		msg.ParseMode = tgbotapi.ModeHTML // Use HTML mode for rich formatting
		bot.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π /start –∏–ª–∏ /help.")
		bot.Send(msg)
	}
}

func translateToEnglish(text string) (string, error) {
	translated, err := gtranslate.TranslateWithParams(
		text,
		gtranslate.TranslationParams{
			From: "ru",
			To:   "en",
		},
	)
	if err != nil {
		return "", err
	}
	return translated, nil
}

func getTodayWeather(location string) (string, error) {
	if location == "" {
		return "", errors.New("–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ")
	}

	translatedLocation, err := translateToEnglish(location)
	if err != nil {
		return "", err
	}

	url := fmt.Sprintf("https://www.ventusky.com/ru/%s", strings.ReplaceAll(strings.ToLower(translatedLocation), " ", "-"))
	log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL: %s", url)

	res, err := http.Get(url)
	if err != nil {
		return "", err
	}
	defer res.Body.Close()

	if res.StatusCode != 200 {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %d %s", res.StatusCode, res.Status)
	}

	doc, err := goquery.NewDocumentFromReader(res.Body)
	if err != nil {
		return "", err
	}

	var weatherData WeatherData

	// Extract weather data
	weatherData.Condition = strings.TrimSpace(doc.Find(".info_tables .big_ico_cell img").AttrOr("title", ""))
	weatherData.Temperature = strings.TrimSpace(doc.Find(".info_tables .temperature").Text())
	weatherData.WindSpeed = strings.TrimSpace(doc.Find(".info_tables .wind_ico").Text())
	weatherData.Precipitation = strings.TrimSpace(doc.Find(".info_tables tr:contains('–û—Å–∞–¥–∫–∏') b").Text())
	weatherData.Pressure = strings.TrimSpace(doc.Find(".info_tables tr:contains('–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ') b").Text())
	weatherData.Visibility = strings.TrimSpace(doc.Find(".info_tables tr:contains('–í–∏–¥–∏–º–æ—Å—Ç—å') b").Text())
	weatherData.Cloudiness = strings.TrimSpace(doc.Find(".info_tables tr:contains('–û–±–ª–∞—á–Ω–æ—Å—Ç—å') b").Text())

	// Format output as Markdown with emojis
	var weatherDetails strings.Builder
	weatherDetails.WriteString("*–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è:*\n")
	weatherDetails.WriteString(fmt.Sprintf("- *–°–æ—Å—Ç–æ—è–Ω–∏–µ:* %s %s\n", getWeatherEmoji(weatherData.Condition), weatherData.Condition))
	weatherDetails.WriteString(fmt.Sprintf("- *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* üå°Ô∏è %s\n", weatherData.Temperature))
	weatherDetails.WriteString(fmt.Sprintf("- *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* üí® %s\n", weatherData.WindSpeed))
	weatherDetails.WriteString(fmt.Sprintf("- *–û—Å–∞–¥–∫–∏:* %s %s\n", getEmojiForPrecipitation(weatherData.Precipitation), weatherData.Precipitation))
	weatherDetails.WriteString(fmt.Sprintf("- *–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ:* üå¨Ô∏è %s\n", weatherData.Pressure))
	weatherDetails.WriteString(fmt.Sprintf("- *–í–∏–¥–∏–º–æ—Å—Ç—å:* üëÅÔ∏è %s\n", weatherData.Visibility))
	weatherDetails.WriteString(fmt.Sprintf("- *–û–±–ª–∞—á–Ω–æ—Å—Ç—å:* %s %s\n", getEmojiForCloudiness(weatherData.Cloudiness), weatherData.Cloudiness))

	return weatherDetails.String(), nil
}

func getWeekWeather(location string) (string, error) {
	if location == "" {
		return "", fmt.Errorf("–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ")
	}

	translatedLocation, err := translateToEnglish(location)
	if err != nil {
		return "", err
	}

	url := fmt.Sprintf("https://www.ventusky.com/ru/%s", strings.ReplaceAll(strings.ToLower(translatedLocation), " ", "-"))
	log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL: %s", url)

	res, err := http.Get(url)
	if err != nil {
		return "", err
	}
	defer res.Body.Close()

	if res.StatusCode != 200 {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %d %s", res.StatusCode, res.Status)
	}

	body, err := io.ReadAll(res.Body)
	if err != nil {
		return "", err
	}

	doc, err := goquery.NewDocumentFromReader(strings.NewReader(string(body)))
	if err != nil {
		return "", err
	}

	var weatherDetails strings.Builder

	doc.Find("ul.menu li").Each(func(i int, s *goquery.Selection) {
		day := strings.TrimSpace(s.Find("a").Contents().First().Text())
		condition, _ := s.Find("img").Attr("title")
		temperature := strings.TrimSpace(s.Find("a").Contents().Last().Text())

		if day != "" && condition != "" && temperature != "" {
			weatherDetails.WriteString(fmt.Sprintf("<b>–î–µ–Ω—å: %s</b>\n", day))
			weatherDetails.WriteString(fmt.Sprintf("<b>–ü–æ–≥–æ–¥–∞:</b> %s %s\n", getWeatherEmoji(condition), condition))
			weatherDetails.WriteString(fmt.Sprintf("<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> %s\n\n", temperature))
		}
	})

	if weatherDetails.Len() == 0 {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.")
	}

	return weatherDetails.String(), nil
}

func getWeatherEmoji(condition string) string {
	condition = strings.ToLower(condition)
	switch {
	case strings.Contains(condition, "—è—Å–Ω–æ"):
		return "üåû"
	case strings.Contains(condition, "–æ–±–ª–∞—á–Ω–æ"):
		return "‚òÅÔ∏è"
	case strings.Contains(condition, "–¥–æ–∂–¥—å"):
		return "üåßÔ∏è"
	case strings.Contains(condition, "—Å–Ω–µ–≥"):
		return "‚ùÑÔ∏è"
	case strings.Contains(condition, "–≥—Ä–æ–∑–∞"):
		return "‚õàÔ∏è"
	case strings.Contains(condition, "—Ç—É–º–∞–Ω"):
		return "üå´Ô∏è"
	case strings.Contains(condition, "—á–∏—Å—Ç–æ–µ –Ω–µ–±–æ"):
		return "‚òÄÔ∏è"
	case strings.Contains(condition, "—Å–º–µ—à–∞–Ω–Ω—ã–π —Å –¥–æ–∂–¥–µ–≤—ã–º–∏ –¥–æ–∂–¥—è–º–∏"):
		return "üå¶Ô∏è"
	default:
		return "üå§Ô∏è" // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
	}
}

// –§—É–Ω–∫—Ü–∏—è getEmojiForPrecipitation –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Å–∞–¥–∫–æ–≤
func getEmojiForPrecipitation(precipitation string) string {
	precipitation = strings.ToLower(precipitation)
	precipitationValue, err := strconv.Atoi(strings.TrimSuffix(precipitation, " mm"))
	if err != nil {
		return "" // –í–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
	}

	switch {
	case precipitationValue > 20:
		return "üåßÔ∏è" // –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
	case precipitationValue > 5:
		return "üå¶Ô∏è" // –õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å
	case precipitationValue > 0:
		return "üåÇ" // –ù–µ–±–æ–ª—å—à–∏–µ –æ—Å–∞–¥–∫–∏
	default:
		return "" // –ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤
	}
}

// –§—É–Ω–∫—Ü–∏—è getEmojiForCloudiness –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏
func getEmojiForCloudiness(cloudiness string) string {
	cloudiness = strings.ToLower(cloudiness)
	cloudinessValue, err := strconv.Atoi(strings.TrimSuffix(cloudiness, " %"))
	if err != nil {
		return "" // –í–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
	}

	switch {
	case cloudinessValue > 75:
		return "‚òÅÔ∏è" // –ü–∞—Å–º—É—Ä–Ω–æ
	case cloudinessValue > 50:
		return "üå•Ô∏è" // –û–±–ª–∞—á–Ω–æ
	case cloudinessValue > 25:
		return "üå§Ô∏è" // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å
	default:
		return "‚òÄÔ∏è" // –Ø—Å–Ω–æ
	}
}
